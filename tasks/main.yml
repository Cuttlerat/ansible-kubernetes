---
- name: Assert kubernetes_node_type
  assert:
    that:
      - kubernetes_node_type in kubernetes_supported_node_type

- name: Ensure ca-certificates installed
  apt:
    name: ca-certificates
    state: present

- name: Ensure ca-certificates installed
  apt:
    name: ca-certificates
    state: present
  
- name: Add kubernetes key
  apt_key:
    id: '{{ kubernetes_apt_key_id }}'
    url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
    state: present
    
- name: Add kubernetes sources list
  apt_repository:
    repo: 'deb http://apt.kubernetes.io/ kubernetes-xenial main'
    state: present
  
- name: Install kubernetes (agent)
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - kubelet
    - kubeadm
    - kubernetes-cni
  when: kubernetes_node_type == 'agent'

- name: Install kubernetes (master)
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - kubelet
    - kubectl
    - kubeadm
    - kubernetes-cni
  when: kubernetes_node_type == 'master'

- name: Fix network_plugin
  replace:
    path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    regexp: '\s\$KUBELET_NETWORK_ARGS'
    replace: ''
  register: kubeadm_conf

- name: Restart kubelet daemon
  systemd:
    state: restarted
    daemon_reload: yes
    name: kubelet
  when: kubeadm_conf.changed

- name: Init cluster
  command: bash -c "kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address={{ ansible_ssh_host }} --kubernetes-version stable-1.8 | grep -Eo 'kubeadm join.*$'"
  register: kubernetes_join
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'
    
- name: Set ports
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: "^    - --service-node-port-range=80-32767$"
    insertafter: "^    - kube-apiserver$"
    line: "    - --service-node-port-range=80-32767"
  register: ports
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'
    
- name: Restart kubelet daemon
  systemd:
    state: restarted
    daemon_reload: yes
    name: kubelet
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'
    - ports.changed is defined
    - ports.changed

- name: Let master be agent
  command: bash -c "sleep 30 && KUBECONFIG=/etc/kubernetes/admin.conf kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'

- name: Copy init.yml to master
  copy:
    src: "{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: 0600
  with_items:
    - init.yml
    
- name: Apply init.yml to cluster
  command: bash -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f {{ item }}"
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'
  with_items:
    - "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
    - "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml"

- name: Wait for flannel up
  command: "sleep 20"
    
- name: Apply init.yml to cluster
  command: bash -c "KUBECONFIG=/etc/kubernetes/admin.conf kubectl apply -f {{ item }}"
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'master'
  with_items:
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/namespace.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/default-backend.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/configmap.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/tcp-services-configmap.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/udp-services-configmap.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/rbac.yaml"
    - "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/with-rbac.yaml"
    - "/tmp/init.yml"

- name: Delete init.yml
  file:
    path: "/tmp/{{ item }}"
    state: absent
  with_items:
    - init.yml
    
- name: Join agents to cluster
  command: bash -c "{{ hostvars[item].kubernetes_join.stdout }}"
  when:
    - kubernetes_init_cluster
    - kubernetes_node_type == 'agent'
    - hostvars[item].kubernetes_join.stdout is defined
  with_items: "{{ groups['kubernetes'] }}"
    
- name: Fetching cluster config to local machine
  fetch:
    src: /etc/kubernetes/admin.conf
    dest: /tmp/
    flat: yes
  when:
    - kubernetes_copy_config is defined
    - kubernetes_copy_config
    - kubernetes_node_type == 'master'
